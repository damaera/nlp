'use strict';

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _morphological_utility = require('./lib/morphological_utility.js');

var _morphological_utility2 = _interopRequireDefault(_morphological_utility);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var totalSyllables = _morphological_utility2.default.totalSyllables;
var removeParticle = _morphological_utility2.default.removeParticle;
var removePossesive = _morphological_utility2.default.removePossesive;
var removeFirstOrderPrefix = _morphological_utility2.default.removeFirstOrderPrefix;
var removeSecondOrderPrefix = _morphological_utility2.default.removeSecondOrderPrefix;
var removeSuffix = _morphological_utility2.default.removeSuffix;
var ShouldNotTransformTheseWords = ['lari', 'nikah', 'pilah', 'pakai', 'iman'];

function stem(word) {
	var derivationalStemming = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

	var numberSyllables = totalSyllables(word);

	if (numberSyllables > 2) {
		word = removePossesive(word);
		if (derivationalStemming) word = stemDerivational(word);
	}

	if (numberSyllables > 2 && !_lodash2.default.includes(ShouldNotTransformTheseWords, word)) {
		word = removeParticle(word);
		if (numberSyllables > 2) word = removeParticle(word);
		if (derivationalStemming) word = stemDerivational(word);
	}

	return word;
}

function stemDerivational(word) {
	var numberSyllables = totalSyllables(word);
	var previousLength = word.length;
	if (numberSyllables > 2) word = removeFirstOrderPrefix(word);

	if (previousLength === word.length) {
		if (numberSyllables > 2) word = removeSecondOrderPrefix(word);
		if (_lodash2.default.includes(ShouldNotTransformTheseWords, word)) numberSyllables -= 1;
		if (numberSyllables > 2) word = removeSuffix(word);
	}

	return word;
}

module.exports = {
	stem: stem
};